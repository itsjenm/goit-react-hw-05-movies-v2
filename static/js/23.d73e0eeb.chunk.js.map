{"version":3,"file":"static/js/23.d73e0eeb.chunk.js","mappings":"qIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,uJClCMC,EAAW,+BACXC,EAAU,4CAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,cAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,CAAC,EAA1D,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMnB,QAAQT,OAAO,IAAI6B,MAAM,cAJ/B,2GAQO,SAASC,IAAiC,IAAbC,EAAY,uDAAL,IACnCC,EAAc,sBAEpB,OAAOV,EAAuB,GAAD,OACxBF,GADwB,OACbY,GADa,OACCX,EADD,iBACiBU,GAE/C,CAcM,SAASE,EAAkBC,GAIhC,OAAOZ,EAAuB,GAAD,OACxBF,GADwB,OAHT,WAGS,OACCc,GADD,OACYb,GADZ,OAFP,mBAKvB,CAGM,SAASc,EAAkBD,GAIhC,OAAOZ,EAAuB,GAAD,OACxBF,GADwB,OAHT,WAGS,OACCc,EADD,mBACoBb,GADpB,OAFP,mBAKvB,CAGM,SAASe,EAAkBF,GAAuB,IAAbH,EAAY,uDAAL,IAC3CC,EAAc,UACdK,EAAgB,wBAEtB,OAAOf,EAAuB,GAAD,OACxBF,GADwB,OACbY,GADa,OACCE,EADD,mBACoBb,GADpB,OAC8BgB,GAD9B,OAC8CN,GAE5E,CAgBD,MAtDO,SAAqBO,GAA0B,IAAbP,EAAY,uDAAL,IACxCC,EAAc,gBAIpB,OAAOV,EAAuB,GAAD,OACxBF,GADwB,OACbY,GADa,OACCX,EADD,YACYiB,EADZ,iBACgCP,GAE9D,C,6ECSD,UAjCgB,WACd,OAA0BQ,EAAAA,EAAAA,MAAlBC,EAAR,EAAQA,QAAST,EAAjB,EAAiBA,KACjB,GAA8BU,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,YACRR,EAAAA,EAAAA,IAAkBI,EAAST,GAAMrB,MAAK,SAAAmC,GAEpCF,EAAWE,EAAKC,QACjB,GACF,GAAE,CAACN,EAAST,IAEbgB,QAAQC,IAAIN,IAGV,yBACGA,EAAQO,OAAS,GAChB,0BACE,wBACGP,EAAQQ,KAAI,SAAAC,GAAM,OACjB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,SASvB,uEAIP,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/fetchMovies.jsx","components/reviews/Reviews.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=36aae46d872dddaed5df56cf6ef9643b';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not Found'));\n}\n\n//get list of the most popular movies for today\nexport function fetchTrendingMovies(page = '1') {\n  const PATH_PARAMS = '/trending/movie/day';\n  // return\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`\n  );\n}\n\n//get search for a movie\nexport function fetchMovies(searchQuery, page = '1') {\n  const PATH_PARAMS = '/search/movie';\n  // eslint-disable-next-line\n  const SEARCH_PARAMS = '&language=en-US&include_adult=false';\n\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&${searchQuery}&page=${page}`\n  );\n}\n\n//get full movie info for the movie page\nexport function fetchMovieDetails(movie_id) {\n  const PATH_PARAMS = '/movie/';\n  const SEARCH_PARAMS = '&language=en-US';\n\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${SEARCH_PARAMS}`\n  );\n}\n\n// get cast info for the movie page\nexport function fetchMovieCredits(movie_id) {\n  const PATH_PARAMS = '/movie/';\n  const SEARCH_PARAMS = '&language=en-US';\n\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${SEARCH_PARAMS}`\n  );\n}\n\n//get reviews for the movie page\nexport function fetchMovieReviews(movie_id, page = '1') {\n  const PATH_PARAMS = '/movie/';\n  const SEARCH_PARAMS = '&language=en-US&page=';\n\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${SEARCH_PARAMS}${page}`\n  );\n}\n\n// const fetchMovies = ({ movieId }) => {\n//     const url = 'https://api.themoviedb.org/3/movie/';\n//     const movieId = `${movieID}?`;\n\n//     try {\n//         axios.get(`${url}${movieId}${key}`)\n//         .then(response => {\n//             return response.data\n//         })\n//     } catch {\n\n//     }\n// }\n\nexport default fetchMovies;\n","import { fetchMovieReviews } from 'api/fetchMovies';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { movieId, page } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchMovieReviews(movieId, page).then(data => {\n      // console.log(data.results)\n      setReviews(data.results);\n    });\n  }, [movieId, page]);\n\n  console.log(reviews);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <div>\n          <ul>\n            {reviews.map(review => (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <h3>We don't have any reviews for this movie.</h3>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Error","fetchTrendingMovies","page","PATH_PARAMS","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","SEARCH_PARAMS","searchQuery","useParams","movieId","useState","reviews","setReviews","useEffect","data","results","console","log","length","map","review","author","content","id"],"sourceRoot":""}